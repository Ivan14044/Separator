<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–∫–∫–∞—É–Ω—Ç—ã</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', sans-serif;
        }

        body {
            background-image: url('https://i.postimg.cc/x1gGnxqH/background1920x1080.jpg');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            color: #fff;
            min-height: 100vh;
        }

        .container {
            max-width: 1600px;
            margin: 20px auto;
            padding: 20px;
            background: rgba(17, 25, 40, 0.95);
            backdrop-filter: blur(12px);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .banner {
            max-width: 80%;
            margin: 0 auto 30px;
            display: block;
            border-radius: 12px;
            transition: transform 0.3s ease, opacity 0.3s ease;
            cursor: pointer;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        .banner:hover {
            transform: scale(1.02);
            opacity: 0.9;
        }

        h1 {
            color: #FFA500;
            font-size: 2.5rem;
            margin-bottom: 30px;
            text-align: center;
            font-weight: 700;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .input-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin-bottom: 40px;
        }

        .file-input {
            display: none;
        }

        .button-group {
            display: flex;
            gap: 16px;
            margin-top: 20px;
        }

        .file-input-label, button {
            background: linear-gradient(135deg, #FFA500, #FF8C00);
            color: white;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 4px 15px rgba(255, 165, 0, 0.3);
            display: inline-flex;
            align-items: center;
            gap: 8px;
            font-size: 16px;
            letter-spacing: 0.5px;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        .file-input-label:hover, button:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 165, 0, 0.4);
            background: linear-gradient(135deg, #FFB732, #FFA000);
        }

        .file-input-label:active, button:active {
            transform: translateY(0);
        }

        textarea {
            width: 100%;
            max-width: 800px;
            height: 120px;
            padding: 16px;
            border-radius: 12px;
            border: 2px solid rgba(255, 165, 0, 0.3);
            background: rgba(255, 255, 255, 0.05);
            color: #fff;
            font-size: 16px;
            resize: vertical;
            transition: all 0.3s ease;
        }

        textarea:focus {
            outline: none;
            border-color: #FFA500;
            box-shadow: 0 0 0 3px rgba(255, 165, 0, 0.2);
        }

        .table-wrapper {
            position: relative;
            margin-top: 30px;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 12px;
            background: rgba(0, 0, 0, 0.2);
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        }

        .scroll-shadow {
            position: absolute;
            top: 0;
            bottom: 0;
            width: 20px;
            pointer-events: none;
            z-index: 2;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .scroll-shadow.left {
            left: 0;
            background: linear-gradient(to right, rgba(0, 0, 0, 0.2), transparent);
        }

        .scroll-shadow.right {
            right: 0;
            background: linear-gradient(to left, rgba(0, 0, 0, 0.2), transparent);
        }

        .table-container.can-scroll-left .scroll-shadow.left,
        .table-container.can-scroll-right .scroll-shadow.right {
            opacity: 1;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            margin: 0;
            font-size: 14px;
        }

        th {
            background: linear-gradient(135deg, #FFA500, #FF8C00);
            color: white;
            font-weight: 600;
            text-align: left;
            padding: 16px;
            position: sticky;
            top: 0;
            z-index: 10;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.2);
        }

        th:first-child {
            border-top-left-radius: 12px;
        }

        th:last-child {
            border-top-right-radius: 12px;
        }

        td {
            padding: 14px 16px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            background: rgba(255, 255, 255, 0.03);
            transition: all 0.3s ease;
            max-width: 200px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }

        tr:hover td {
            background: rgba(255, 165, 0, 0.1);
        }

        td.copyable {
            cursor: pointer;
            position: relative;
        }

        td.copyable:hover {
            background: rgba(255, 165, 0, 0.2);
        }

        td.copyable::after {
            content: 'üìã';
            position: absolute;
            right: 8px;
            top: 50%;
            transform: translateY(-50%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        td.copyable:hover::after {
            opacity: 1;
        }

        .tooltip {
            position: fixed;
            background: linear-gradient(135deg, #FFA500, #FF8C00);
            color: white;
            padding: 8px 16px;
            border-radius: 6px;
            font-size: 14px;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: 1000;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #FFA500, #FF8C00);
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #FF8C00, #FF7000);
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
            animation: fadeIn 0.5s ease forwards;
        }

        .hidden {
            display: none;
        }
    </style>
</head>
<body>

<div class="container fade-in">
    <img src="https://i.postimg.cc/XYPcfM32/banner3232323.jpg" alt="banner" class="banner" onclick="window.location.href='https://account-factory.com.ua/'">
    
    <h1>–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–ª–∏</h1>
    
    <div class="input-section">
        <input type="file" id="fileInput" class="file-input">
        <label for="fileInput" class="file-input-label">
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M17 8l-5-5-5 5M12 3v12"/>
            </svg>
            –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª
        </label>
        
        <textarea id="accountsInput" placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"></textarea>
        
        <div class="button-group">
            <button onclick="showAccounts()">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 5v14M5 12h14"/>
                </svg>
                –ü–æ–∫–∞–∑–∞—Ç—å
            </button>
            <button id="exportButton" onclick="exportToExcel()" class="hidden">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5 5-5M12 15V3"/>
                </svg>
                –°–∫–∞—á–∞—Ç—å Excel
            </button>
        </div>
    </div>

    <div class="table-wrapper">
        <div class="scroll-shadow left"></div>
        <div class="scroll-shadow right"></div>
        <div id="accountsTable" class="table-container"></div>
    </div>
    <div id="tooltip" class="tooltip"></div>
</div>

<script>
    const headers = ["#", "–õ–æ–≥–∏–Ω", "–ü–∞—Ä–æ–ª—å", "–ü–æ—á—Ç–∞", "–ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã", "–ò–º—è", "–§–∞–º–∏–ª–∏—è", 
                    "–°—Å—ã–ª–∫–∞ —Å–æ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞", "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–ú–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è", "–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è",
                    "–¢–æ–∫–µ–Ω", "ID ads", "–ö—É–∫–∏", "–Æ–∑–µ—Ä –∞–≥–µ–Ω—Ç", "2FA", 
                    "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ", "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ 2",
                    "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ 3", "–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ 4"];

    let currentData = [];

    function showAccounts() {
        const accountsInput = document.getElementById("accountsInput").value.trim();
        const accountsArray = accountsInput.split("\n");
        currentData = accountsArray.map(account => account.split("|"));

        let tableContent = "<table><tr>";
        headers.forEach(header => {
            tableContent += `<th>${header}</th>`;
        });
        tableContent += "</tr>";

        accountsArray.forEach((account, index) => {
            const fields = account.split("|");
            tableContent += "<tr>";
            tableContent += `<td>${index + 1}</td>`;
            
            fields.forEach(field => {
                tableContent += `<td class="copyable" onclick="copyToClipboard(this)">${field || ''}</td>`;
            });

            for (let i = fields.length; i < headers.length - 1; i++) {
                tableContent += '<td class="copyable" onclick="copyToClipboard(this)"></td>';
            }
            
            tableContent += "</tr>";
        });

        tableContent += "</table>";
        document.getElementById("accountsTable").innerHTML = tableContent;
        document.getElementById("exportButton").classList.remove("hidden");
        
        // Initialize scroll shadows
        updateScrollShadows();
    }

    function exportToExcel() {
        const wb = XLSX.utils.book_new();
        const ws_data = [headers];

        currentData.forEach((row, index) => {
            const fullRow = [index + 1, ...row];
            while (fullRow.length < headers.length) {
                fullRow.push('');
            }
            ws_data.push(fullRow);
        });

        const ws = XLSX.utils.aoa_to_sheet(ws_data);
        XLSX.utils.book_append_sheet(wb, ws, "Accounts");
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        const max_width = headers.map(h => h.length);
        ws_data.forEach(r => {
            r.forEach((cell, i) => {
                const cellLength = cell ? cell.toString().length : 0;
                max_width[i] = Math.max(max_width[i], cellLength);
            });
        });
        
        ws['!cols'] = max_width.map(w => ({wch: w + 2}));

        XLSX.writeFile(wb, "accounts.xlsx");
    }

    function copyToClipboard(element) {
        const text = element.innerText;
        navigator.clipboard.writeText(text);
        
        const tooltip = document.getElementById("tooltip");
        tooltip.textContent = "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: " + text;
        tooltip.style.opacity = "1";
        
        document.addEventListener('mousemove', moveTooltip);
        
        setTimeout(() => {
            tooltip.style.opacity = "0";
            document.removeEventListener('mousemove', moveTooltip);
        }, 2000);
    }

    function moveTooltip(e) {
        const tooltip = document.getElementById("tooltip");
        tooltip.style.left = (e.pageX + 10) + 'px';
        tooltip.style.top = (e.pageY + 10) + 'px';
    }

    function updateScrollShadows() {
        const container = document.getElementById("accountsTable");
        const canScrollLeft = container.scrollLeft > 0;
        const canScrollRight = container.scrollLeft < (container.scrollWidth - container.clientWidth);

        container.classList.toggle('can-scroll-left', canScrollLeft);
        container.classList.toggle('can-scroll-right', canScrollRight);
    }

    document.getElementById('fileInput').addEventListener('change', function(event) {
        const file = event.target.files[0];
        const reader = new FileReader();

        reader.onload = function(e) {
            document.getElementById('accountsInput').value = e.target.result;
        };

        reader.readAsText(file);
    });

    document.getElementById('accountsTable').addEventListener('scroll', updateScrollShadows);

    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.fade-in').forEach((element, index) => {
            element.style.animationDelay = `${index * 0.1}s`;
        });
    });
</script>

</body>
</html>
